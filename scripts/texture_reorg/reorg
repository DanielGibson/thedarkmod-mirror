#!/usr/bin/python

import os
import string
import sys
import re
import glob
import scriptutil

#from DebugMessage import stdMsg, dbgMsg, errMsg, setDebugging


unknown_material = 0 
LOGFILE="reorg_logfile.txt"
SrcPath="/cygdrive/d/Home/cygwin/gruberg/darkmod"
DstPath="/cygdrive/d/Home/cygwin/gruberg/darkmod_reorg"
#SrcPath="/home/sparhawk/darkmod"
#DstPath="/home/sparhawk/darkmod_reorg"

class Texture:
	def __init__(self):
		self.TextureName = ""
		self.TextureExt = ""
		self.TextureMaterial = ""
		self.TexturePath = ""

	def __repr__(self):
		return "['"+self.TexturePath+"', '" +self.TextureName + "', '" + self.TextureExt + "', " + self.TextureMaterial +"']"

class TextureRecord:
	def __init__(self):
		self.mNew = Texture()
		self.mOld = Texture()
		self.MaterialFilename = []

	def __repr__(self):
		mat = ""
		if self.MaterialFilename == None:
			mat = "None"
		else:
			for i in self.MaterialFilename:
				mat += "'"+i+"', "

			mat = mat[0:len(mat)-2]

		return "[* "+mat + "\n **" + self.mOld.__repr__() + "\n **" + self.mNew.__repr__()+" *]\n"

class TextureReorg:
	def __init__(self, Logfile, SrcPath, DstPath, InputFile):
		self.mLogFile = self.OpenFile(Logfile, "w+b")
		self.mInput = self.OpenFile(InputFile, "r+b")
		self.mSrcPath = SrcPath
		self.mDstPath = DstPath
		self.mMaterial = glob.glob(SrcPath+"/materials/*")
		self.mMaterialFile = {}

		self.mTextureRecord = []

	def OpenFile(self, name, mode):
		try:
			fl = file(name, mode)
		except IOError:
			print "Couldn't open "+name
			sys.exit(1)
		return fl

	def ParseInput(self):
		bSVN = 0
		bDir = 0
		dir = []
		path = ""
		while 1:
			ln = self.mInput.readline()

			if not ln:
				break

			ln = ln.strip()
			if(len(ln) == 0):
				continue

			if(len(ln.split("Volume")) > 1):
				continue

			if(len(ln.split("File(s)")) > 1):
				continue

			if(len(ln.split("Total Files Listed:")) > 1):
				continue

			if(len(ln.split("Dir(s)")) > 1):
				continue

			if(len(ln.split("<DIR>")) > 1):
				continue

			# We need to get all directory names ...
			t = ln.split("Directory of")
			if(len(t) > 1):
				bSVN = 0
				bDir = 1

			# ... but only if it's not part of SVN
			if(len(ln.split(".svn")) > 1):
				bSVN = 1

			if(bSVN == 1):
				continue

			if(bDir == 1):
				bDir = 0
				if(len(dir) != 0):
					self.mTextureRecord.append(dir)

				path = (t[1].strip().replace("\\", "/").split("D:/temp2/")[1]).strip()
				try:
					os.mkdir(DstPath + "/" + path)
					os.mkdir(DstPath + "/dds/" + path)
				except OSError:
					pass
				#print path
				dir = []
				continue

			t = ln[39:]
			v = t.split(".")
			record = TextureRecord()
			record.mNew.TexturePath = path
			if(len(v) == 2):
				#print "Texture has only one name:"+t
				record.mNew.TextureName = v[0].strip()
				record.mNew.TextureExt = v[1].strip()
				record.mOld.TextureName = v[0].strip()
				record.mOld.TextureExt = v[1].strip()
			elif(len(v) == 4):
				record.mOld.TextureName = v[2].strip()
				record.mOld.TextureExt = v[3].strip()
				record.mNew.TextureName = v[0].strip()
				record.mNew.TextureExt = v[1].strip()
			else:
				print "Wrong number of arguments: "+ln

			dir.append(record)
			if(self.TextureMaterial(record.mOld.TextureName, record.MaterialFilename) == None):
				#record.MaterialFilename = []
				#record.MaterialFilename.append("materials/unknown.mtr")
				record.MaterialFilename = None
				print "No material: ["+ path +"] "+record.mOld.TextureName, t
			#print record.mOld.TextureName, record.MaterialFilename
			#print t

			#record.mOld.TexturePath = self.SearchTexture(SrcPath+"/textures/", record.mOld.TextureName+"."+record.mOld.TextureExt)
			#if record.mOld.TexturePath == None:
			#	record.mOld.TexturePath = self.SearchTexture(SrcPath+"/dds/textures/", record.mOld.TextureName+"."+record.mOld.TextureExt)

			#if record.mOld.TexturePath == None:
			#	print "File ["+record.mOld.TextureName+"."+record.mOld.TextureExt+"] not found!"

		self.mInput.close()

	def SearchTexture(self, path, texname):
		rc = None

		flist = scriptutil.ffind(path, namefs=(lambda s: '.svn' not in s, lambda s: texname in s,))
		#print len(flist), flist, path, texname

		if len(flist) == 1:
			rc = flist[0]
		elif len(flist) > 1:
			print "File ["+texname+"] in more then one directory!", flist

		return rc

	def Exists(self, matarray, matname):
		b = 0;

		for i in matarray:
			if(matname == i):
				#print matname + " Exists", matarray
				b = 1
				break

		return b

	def TextureMaterial(self, tname, matarray):
		rc = None
		for fn in self.mMaterial:
			t = fn.split("replacements.txt")
			if(len(t) > 1):
				continue

			b = ""
			try:
				t = self.mMaterialFile[fn]
				b = t[0]
			except KeyError:
				f = open(fn)
				b = f.read()
				f.close()
				t = []
				t.append(b)
				l = b.split("\r\n")
				ind = 0
				prevind = 0
				n = len(l)
				i = 0
				title = 'l'

				# Now we construct the indentation level
				# so we can easily identify the material
				# names afterwards.
				while i < n:
					m = l[i]
					s = m.strip()
					if s[0:1] == "{":
						ind = ind + 1
					elif s[0:1] == "}":
						ind = ind - 1

					# Check if we have found a material name
					if ind == 1 and prevind == 0:
						l[i-1][2] = 'n'

					prevind = ind
					l[i] =  [m, ind, 'l']
					i = i+1

				t.append(l)
				self.mMaterialFile[fn] = t

			t = b.split(tname)
			if(len(t) > 1):
				if(self.Exists(matarray, fn) == 0):
					fn = fn.split(SrcPath+"/")[1]
					matarray.append(fn)
					rc = 1
					#print fn

		return rc

	def ReplaceTexture(self, mat, oname, nname):
		if oname == nname:
			return

		tname = None
		print oname + " -> " + nname
		for l in mat[1]:
			if l[1] == 0:
				tname = None

			if l[2] == 'n':
				tname = l[0]
				print "*********" + tname

			print l[0]
		return

	def ProcessReorg(self):
		cnt = 0
		for dir in self.mTextureRecord:
			for record in dir:
				for matname in record.MaterialFilename:
					cnt = cnt + 1
					self.ReplaceTexture(self.mMaterialFile[SrcPath+"/"+matname], record.mOld.TextureName, record.mNew.TextureName)
					sys.exit(0)

		return

if __name__ == '__main__':
	#setDebugging(1)
	if len(sys.argv) <= 1:
		print "USAGE: reorg Inputfile"
		sys.exit(1)

	reorg = TextureReorg(LOGFILE, SrcPath, DstPath, sys.argv[1])
	reorg.ParseInput()
	reorg.ProcessReorg()

	sys.exit(0)
